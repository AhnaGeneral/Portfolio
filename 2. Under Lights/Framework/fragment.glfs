#version 330 core

in vec3 Normal; 
in vec3 FragPos; 

in vec3 LightPos; 
in vec3 LightColor; 
in vec3 ObjectColor; 
in vec3 ViewPos; 
in vec3 Color; 

out vec4 FragColor; 


void main()
{
   float ambientLight = 0.1;
   vec3 ambient = ambientLight * LightColor;

   vec3 normalVector = Normal;
   vec3 lightDir = normalize(LightPos-FragPos); 
   float diffuseLight = max(dot(normalVector, lightDir), 0.0);
   vec3 diffuse = diffuseLight * LightColor;

   int shininess = 32;
   vec3 viewDir = normalize(FragPos-ViewPos);
   vec3 reflectDir = reflect(-lightDir, normalVector);
   float specularColor = max(dot(viewDir, reflectDir), 0.0);
   specularColor = pow(specularColor, shininess);
   vec3 specular = specularColor * LightColor;


   vec3 result = (ambient + diffuse + specular) * (Color*0.7);

   FragColor = vec4(result,1.0f);

}